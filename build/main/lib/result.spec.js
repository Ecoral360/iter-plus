"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = __importDefault(require("ava"));
const result_1 = require("./result");
const option_1 = require("./option");
(0, ava_1.default)('General Result', (t) => {
    let goodResult = (0, result_1.Ok)(10);
    let badResult = (0, result_1.Err)(10);
    t.assert(goodResult.isOk() && !goodResult.isErr());
    t.assert(badResult.isErr() && !badResult.isOk());
    // `map` and `map_err` consume the `Result` and produce another.
    goodResult = goodResult.map((i) => i + 1);
    badResult = badResult.mapErr((i) => i - 1);
    t.deepEqual(goodResult, (0, result_1.Ok)(11));
    t.deepEqual(badResult, (0, result_1.Err)(9));
    // Use `and_then` to continue the computation.
    const newGoodResult = goodResult.andThen((i) => (0, result_1.Ok)(i == 11));
    t.deepEqual(newGoodResult, (0, result_1.Ok)(true));
    // Use `or_else` to handle the error.
    badResult = badResult.orElse((i) => (0, result_1.Ok)(i + 20));
    t.deepEqual(badResult, (0, result_1.Ok)(29));
    // Consume the result and return the contents with `unwrap`.
    const final_awesome_result = newGoodResult.unwrap();
    t.assert(final_awesome_result);
});
(0, ava_1.default)('Result.flatten()', (t) => {
    const x = (0, result_1.Ok)((0, result_1.Ok)('hello'));
    t.deepEqual((0, result_1.Ok)('hello'), x.flatten());
    const y = (0, result_1.Ok)((0, result_1.Err)(6));
    t.deepEqual((0, result_1.Err)(6), y.flatten());
    const z = (0, result_1.Err)(6);
    t.deepEqual((0, result_1.Err)(6), z.flatten());
});
(0, ava_1.default)('Result.transpose()', (t) => {
    const x = (0, result_1.Ok)((0, option_1.Some)(5));
    const y = (0, option_1.Some)((0, result_1.Ok)(5));
    t.deepEqual(x.transpose().unwrap(), y.unwrap());
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzdWx0LnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL3Jlc3VsdC5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsOENBQXVCO0FBRXZCLHFDQUEyQztBQUMzQyxxQ0FBZ0M7QUFFaEMsSUFBQSxhQUFJLEVBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRTtJQUMzQixJQUFJLFVBQVUsR0FBMkIsSUFBQSxXQUFFLEVBQUMsRUFBRSxDQUFDLENBQUM7SUFDaEQsSUFBSSxTQUFTLEdBQTJCLElBQUEsWUFBRyxFQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2hELENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDbkQsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUVqRCxnRUFBZ0U7SUFDaEUsVUFBVSxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUMxQyxTQUFTLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzNDLENBQUMsQ0FBQyxTQUFTLENBQUMsVUFBVSxFQUFFLElBQUEsV0FBRSxFQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDaEMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsSUFBQSxZQUFHLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUvQiw4Q0FBOEM7SUFDOUMsTUFBTSxhQUFhLEdBQUcsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBQSxXQUFFLEVBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDN0QsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxhQUFhLEVBQUUsSUFBQSxXQUFFLEVBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUVyQyxxQ0FBcUM7SUFDckMsU0FBUyxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUEsV0FBRSxFQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2hELENBQUMsQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLElBQUEsV0FBRSxFQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFFL0IsNERBQTREO0lBQzVELE1BQU0sb0JBQW9CLEdBQUcsYUFBYSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ3BELENBQUMsQ0FBQyxNQUFNLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUNqQyxDQUFDLENBQUMsQ0FBQztBQUVILElBQUEsYUFBSSxFQUFDLGtCQUFrQixFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUU7SUFDN0IsTUFBTSxDQUFDLEdBQUcsSUFBQSxXQUFFLEVBQUMsSUFBQSxXQUFFLEVBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUMxQixDQUFDLENBQUMsU0FBUyxDQUFDLElBQUEsV0FBRSxFQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO0lBRXRDLE1BQU0sQ0FBQyxHQUFHLElBQUEsV0FBRSxFQUFDLElBQUEsWUFBRyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDckIsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFBLFlBQUcsRUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztJQUVqQyxNQUFNLENBQUMsR0FBMkMsSUFBQSxZQUFHLEVBQUMsQ0FBQyxDQUFDLENBQUM7SUFDekQsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFBLFlBQUcsRUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNuQyxDQUFDLENBQUMsQ0FBQztBQUVILElBQUEsYUFBSSxFQUFDLG9CQUFvQixFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUU7SUFDL0IsTUFBTSxDQUFDLEdBQUcsSUFBQSxXQUFFLEVBQUMsSUFBQSxhQUFJLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN0QixNQUFNLENBQUMsR0FBRyxJQUFBLGFBQUksRUFBQyxJQUFBLFdBQUUsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUMsQ0FBQyxDQUFDIn0=