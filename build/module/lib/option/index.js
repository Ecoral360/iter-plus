class OptionClass {
    val;
    constructor(val) {
        this.val = val;
    }
    isSome = () => !this.isNone();
    isNone = () => this.val === _none;
    mapSome = (fn) => {
        if (this.isSome())
            return Some(fn(this.val));
        return None();
    };
    /**
     * @throws Error if called on {@link None}
     */
    unwrap() {
        if (this.isNone())
            throw new Error('Attempted to unwrap a None value');
        return this.val;
    }
    unwrapOr(fallback) {
        if (this.isNone())
            return fallback;
        return this.val;
    }
    unwrapOrElse(fallback) {
        if (this.isNone())
            return fallback();
        return this.val;
    }
}
const _none = Symbol('None value');
export const None = () => new OptionClass(_none);
export const Some = (val) => new OptionClass(val);
// -------------------- Pipeable versions of option functions --------------------
export var opt;
(function (opt_1) {
    opt_1.unwrap = (opt) => {
        return opt.unwrap();
    };
    opt_1.unwrapOr = (fallback) => {
        return (opt) => (opt.isSome() ? opt.val : fallback);
    };
    opt_1.unwrapOrElse = (fallback) => {
        return (opt) => (opt.isSome() ? opt.val : fallback());
    };
    opt_1.mapSome = (fn) => {
        return (opt) => {
            if (opt.isSome())
                return Some(fn(opt.val));
            return None();
        };
    };
})(opt || (opt = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL29wdGlvbi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLFdBQVc7SUFDYTtJQUE1QixZQUE0QixHQUFNO1FBQU4sUUFBRyxHQUFILEdBQUcsQ0FBRztJQUFHLENBQUM7SUFFdEMsTUFBTSxHQUFHLEdBQXdCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUVuRCxNQUFNLEdBQUcsR0FBd0IsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssS0FBSyxDQUFDO0lBRXZELE9BQU8sR0FBRyxDQUFLLEVBQWlCLEVBQWMsRUFBRTtRQUM5QyxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFBRSxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDN0MsT0FBTyxJQUFJLEVBQUUsQ0FBQztJQUNoQixDQUFDLENBQUM7SUFFRjs7T0FFRztJQUNILE1BQU07UUFDSixJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDdkUsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDO0lBQ2xCLENBQUM7SUFJRCxRQUFRLENBQUMsUUFBVztRQUNsQixJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFBRSxPQUFPLFFBQVEsQ0FBQztRQUNuQyxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUM7SUFDbEIsQ0FBQztJQU9ELFlBQVksQ0FBQyxRQUFpQjtRQUM1QixJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFBRSxPQUFPLFFBQVEsRUFBRSxDQUFDO1FBQ3JDLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUNsQixDQUFDO0NBQ0Y7QUFFRCxNQUFNLEtBQUssR0FBa0IsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBSWxELE1BQU0sQ0FBQyxNQUFNLElBQUksR0FBRyxHQUFxQixFQUFFLENBQUMsSUFBSSxXQUFXLENBQUksS0FBWSxDQUFDLENBQUM7QUFJN0UsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUFHLENBQUksR0FBTSxFQUFlLEVBQUUsQ0FDN0MsSUFBSSxXQUFXLENBQUMsR0FBRyxDQUFnQixDQUFDO0FBRXRDLGtGQUFrRjtBQUNsRixNQUFNLEtBQVcsR0FBRyxDQXVCbkI7QUF2QkQsV0FBaUIsS0FBRztJQUNMLFlBQU0sR0FBRyxDQUFJLEdBQWMsRUFBSyxFQUFFO1FBQzdDLE9BQU8sR0FBRyxDQUFDLE1BQU0sRUFBTyxDQUFDO0lBQzNCLENBQUMsQ0FBQztJQUVXLGNBQVEsR0FBRyxDQUFJLFFBQVcsRUFBMkIsRUFBRTtRQUNsRSxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDdEQsQ0FBQyxDQUFDO0lBRVcsa0JBQVksR0FBRyxDQUMxQixRQUFpQixFQUNRLEVBQUU7UUFDM0IsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDeEQsQ0FBQyxDQUFDO0lBRVcsYUFBTyxHQUFHLENBQ3JCLEVBQWlCLEVBQ2lCLEVBQUU7UUFDcEMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFO1lBQ2IsSUFBSSxHQUFHLENBQUMsTUFBTSxFQUFFO2dCQUFFLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUMzQyxPQUFPLElBQUksRUFBRSxDQUFDO1FBQ2hCLENBQUMsQ0FBQztJQUNKLENBQUMsQ0FBQztBQUNKLENBQUMsRUF2QmdCLEdBQUcsS0FBSCxHQUFHLFFBdUJuQiJ9