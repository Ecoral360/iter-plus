import { None, Some } from '../option';
function _isOk(val) {
    return '__ok' in val;
}
function _isErr(val) {
    return '__err' in val;
}
function _newResult(val) {
    const result = class {
        isOk() {
            return _isOk(val);
        }
        isOkAnd(pred) {
            return _isOk(val) && pred(val.__ok);
        }
        isErr() {
            return _isErr(val);
        }
        isErrAnd(pred) {
            return _isErr(val) && pred(val.__err);
        }
        ok() {
            return _isOk(val) ? Some(val.__ok) : None();
        }
        err() {
            return _isErr(val) ? Some(val.__err) : None();
        }
        map(fn) {
            if (_isOk(val))
                return Ok(fn(val.__ok));
            return this;
        }
        mapOr(fallbackValue, fn) {
            if (_isOk(val))
                return fn(val.__ok);
            return fallbackValue;
        }
        mapOrElse(fallbackFn, fn) {
            if (_isOk(val))
                return fn(val.__ok);
            return fallbackFn(val.__err);
        }
        mapErr(fn) {
            if (_isErr(val))
                return Err(fn(val.__err));
            return this;
        }
        inspect(fn) {
            if (_isOk(val))
                void fn(val.__ok);
            return this;
        }
        inspectErr(fn) {
            if (_isErr(val))
                void fn(val.__err);
            return this;
        }
        unwrap() {
            if (_isOk(val))
                return val.__ok;
            throw new Error('Called `unwrap()` on an `Err` value.');
        }
        unwrapOr(fallbackValue) {
            if (_isOk(val))
                return val.__ok;
            return fallbackValue;
        }
        unwrapOrElse(fallbackFn) {
            if (_isOk(val))
                return val.__ok;
            return fallbackFn(val.__err);
        }
        unwrapErr() {
            if (_isErr(val))
                return val.__err;
            throw new Error('Called `unwrapErr()` on an `Ok` value.');
        }
        unwrapUnchecked() {
            return val.__ok;
        }
        unwrapErrUnchecked() {
            return val.__err;
        }
        and(res) {
            if (_isOk(val))
                return res;
            return this;
        }
        andThen(fn) {
            if (_isOk(val))
                return fn(val.__ok);
            return this;
        }
        or(res) {
            if (_isErr(val))
                return res;
            return this;
        }
        orElse(fn) {
            if (_isErr(val))
                return fn(val.__err);
            return this;
        }
        into() {
            return this;
        }
        intoErr() {
            return this;
        }
        transpose() {
            if (_isErr(val))
                return Some(this);
            return val.__ok.map((v) => Ok(v));
        }
        flatten() {
            if (_isOk(val))
                return val.__ok;
            return this;
        }
    };
    return new result();
}
export const Ok = (ok) => _newResult({ __ok: ok });
export const Err = (err) => _newResult({ __err: err });
// -------------------- Pipeable versions of resion functions --------------------
export const unwrap = (res) => {
    return res.unwrap();
};
export const unwrapOr = (fallback) => {
    return (res) => (res.isOk() ? res.unwrapUnchecked() : fallback);
};
export const unwrapOrElse = (fallback) => {
    return (res) => (res.isOk() ? res.unwrapUnchecked() : fallback());
};
export const isOk = (result) => result.isOk();
export const isErr = (result) => result.isErr();
export const mapResults = (arr, fn) => {
    const oks = [];
    for (const el of arr) {
        const val = fn(el);
        if (val.isErr())
            return val.intoErr();
        oks.push(val.unwrapUnchecked());
    }
    return Ok(oks);
};
export const flatMapResults = (arr, fn) => {
    return mapResults(arr, fn).map((r) => r.flat());
};
export const map = (result, fn) => {
    if (result.isOk())
        return Ok(fn(result.unwrapUnchecked()));
    return result.intoErr();
};
// export const mapErr = <T, E, E2>(
//   result: Result<T, E>,
//   fn: (err: E) => E2
// ): Result<T, E2> => {
//   if (isErr(result)) return Err(fn(result.err));
//   return result;
// };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzdWx0Mi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvcmVzdWx0L3Jlc3VsdDIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBVSxJQUFJLEVBQUUsTUFBTSxXQUFXLENBQUM7QUE0RC9DLFNBQVMsS0FBSyxDQUFPLEdBQW9CO0lBQ3ZDLE9BQU8sTUFBTSxJQUFJLEdBQUcsQ0FBQztBQUN2QixDQUFDO0FBQ0QsU0FBUyxNQUFNLENBQU8sR0FBb0I7SUFDeEMsT0FBTyxPQUFPLElBQUksR0FBRyxDQUFDO0FBQ3hCLENBQUM7QUFFRCxTQUFTLFVBQVUsQ0FBTyxHQUFvQjtJQUM1QyxNQUFNLE1BQU0sR0FBRztRQUNiLElBQUk7WUFDRixPQUFPLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNwQixDQUFDO1FBQ0QsT0FBTyxDQUFDLElBQXdCO1lBQzlCLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdEMsQ0FBQztRQUNELEtBQUs7WUFDSCxPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNyQixDQUFDO1FBQ0QsUUFBUSxDQUFDLElBQXlCO1lBQ2hDLE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDeEMsQ0FBQztRQUVELEVBQUU7WUFDQSxPQUFPLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDOUMsQ0FBQztRQUNELEdBQUc7WUFDRCxPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENB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