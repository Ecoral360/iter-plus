export class Result {
    ok;
    err;
    _isErr;
    constructor(ok, err, _isErr) {
        this.ok = ok;
        this.err = err;
        this._isErr = _isErr;
    }
    isOk() {
        return !this._isErr;
    }
    isErr() {
        return this._isErr;
    }
    map(fn) {
        if (this.isOk())
            return Ok(fn(this.ok));
        return Err(this.err);
    }
    /**
     * Returns the inner value without checking if the value is None.
     * **Only do this if you already checked the value was Some<T>**
     */
    unsafeUnwrap() {
        return this.ok;
    }
    /**
     * @throws Error if called on {@link None}
     */
    unwrap() {
        if (this.isErr())
            throw new Error(`Attempted to unwrap an Err value: ${this.err}`);
        return this.ok;
    }
    unwrapOr(fallback) {
        if (this.isErr())
            return fallback;
        return this.ok;
    }
    unwrapOrElse(fallback) {
        if (this.isErr())
            return fallback();
        return this.ok;
    }
}
export const Ok = (ok) => new Result(ok, undefined, false);
export const Err = (err) => new Result(undefined, err, true);
// -------------------- Pipeable versions of option functions --------------------
export const unwrap = (opt) => {
    return opt.unwrap();
};
export const unwrapOr = (fallback) => {
    return (opt) => (opt.isOk() ? opt.unsafeUnwrap() : fallback);
};
export const unwrapOrElse = (fallback) => {
    return (opt) => (opt.isOk() ? opt.unsafeUnwrap() : fallback());
};
export const isOk = (result) => result.isOk();
export const isErr = (result) => result.isErr();
export const mapResults = (arr, fn) => {
    const oks = [];
    for (const el of arr) {
        const val = fn(el);
        if (val.isErr())
            return val;
        oks.push(val.unsafeUnwrap());
    }
    return Ok(oks);
};
export const flatMapResults = (arr, fn) => {
    return mapResults(arr, fn).map((r) => r.flat());
};
// export const map = <T, E, T2>(
//   result: Result<T, E>,
//   fn: (ok: T) => T2
// ): Result<T2, E> => {
//   if (result.isOk()) return Ok(fn(result.unsafeUnwrap()));
//   return result;
// };
// export const mapErr = <T, E, E2>(
//   result: Result<T, E>,
//   fn: (err: E) => E2
// ): Result<T, E2> => {
//   if (isErr(result)) return Err(fn(result.err));
//   return result;
// };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzdWx0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYi9yZXN1bHQvcmVzdWx0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sT0FBTyxNQUFNO0lBR0k7SUFBd0I7SUFBd0I7SUFBckUsWUFBcUIsRUFBYSxFQUFXLEdBQWMsRUFBVSxNQUFlO1FBQS9ELE9BQUUsR0FBRixFQUFFLENBQVc7UUFBVyxRQUFHLEdBQUgsR0FBRyxDQUFXO1FBQVUsV0FBTSxHQUFOLE1BQU0sQ0FBUztJQUFHLENBQUM7SUFFeEYsSUFBSTtRQUNGLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFBO0lBQ3JCLENBQUM7SUFFRCxLQUFLO1FBQ0gsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxHQUFHLENBQUksRUFBaUI7UUFDdEIsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3hDLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN2QixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsWUFBWTtRQUNWLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQztJQUNqQixDQUFDO0lBRUQ7O09BRUc7SUFDSCxNQUFNO1FBQ0osSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ2QsTUFBTSxJQUFJLEtBQUssQ0FBQyxxQ0FBcUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDbkUsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDO0lBQ2pCLENBQUM7SUFJRCxRQUFRLENBQUMsUUFBVztRQUNsQixJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFBRSxPQUFPLFFBQVEsQ0FBQztRQUNsQyxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUM7SUFDakIsQ0FBQztJQU9ELFlBQVks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